# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:30:54+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ActionDescription(RootModel[constr(pattern=r'[\s\S]+', max_length=512)]):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class ActionId(RootModel[constr(pattern=r'[\S]+', max_length=128)]):
    root: constr(pattern=r'[\S]+', max_length=128)


class ActionParameterDescription(RootModel[constr(pattern=r'[\s\S]+', max_length=512)]):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class ActionParameterName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ActionParameterRequired(RootModel[bool]):
    root: bool


class ActionTargetName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ClientToken(RootModel[constr(pattern=r'[\S]+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'[\S]+', min_length=1, max_length=1024)


class CloudWatchLogGroupArn(
    RootModel[constr(pattern=r'[\S]+', min_length=20, max_length=2048)]
):
    root: constr(pattern=r'[\S]+', min_length=20, max_length=2048)


class ConflictException(RootModel[Any]):
    root: Any


class CreationTime(RootModel[datetime]):
    root: datetime


class DeleteExperimentTemplateRequest(BaseModel):
    pass


class ExperimentActionDescription(
    RootModel[constr(pattern=r'[\s\S]+', max_length=512)]
):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class ExperimentActionEndTime(RootModel[datetime]):
    root: datetime


class ExperimentActionName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentActionParameter(RootModel[constr(pattern=r'[\S]+', max_length=1024)]):
    root: constr(pattern=r'[\S]+', max_length=1024)


class ExperimentActionParameterMap(
    RootModel[Optional[Dict[str, ExperimentActionParameter]]]
):
    root: Optional[Dict[str, ExperimentActionParameter]] = None


class ExperimentActionParameterName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentActionStartAfter(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentActionStartAfterList(RootModel[List[ExperimentActionStartAfter]]):
    root: List[ExperimentActionStartAfter]


class ExperimentActionStartTime(RootModel[datetime]):
    root: datetime


class ExperimentActionStatus(Enum):
    pending = 'pending'
    initiating = 'initiating'
    running = 'running'
    completed = 'completed'
    cancelled = 'cancelled'
    stopping = 'stopping'
    stopped = 'stopped'
    failed = 'failed'


class ExperimentActionStatusReason(
    RootModel[constr(pattern=r'[\s\S]+', max_length=512)]
):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class ExperimentActionTargetName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentCloudWatchLogsLogConfiguration(BaseModel):
    logGroupArn: Optional[CloudWatchLogGroupArn] = None


class ExperimentEndTime(RootModel[datetime]):
    root: datetime


class ExperimentId(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentStartTime(RootModel[datetime]):
    root: datetime


class ExperimentStatus(Enum):
    pending = 'pending'
    initiating = 'initiating'
    running = 'running'
    completed = 'completed'
    stopping = 'stopping'
    stopped = 'stopped'
    failed = 'failed'


class ExperimentStatusReason(RootModel[constr(pattern=r'[\s\S]+', max_length=512)]):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class ExperimentTargetFilterPath(RootModel[constr(pattern=r'[\S]+', max_length=256)]):
    root: constr(pattern=r'[\S]+', max_length=256)


class ExperimentTargetFilterValue(RootModel[constr(pattern=r'[\S]+', max_length=128)]):
    root: constr(pattern=r'[\S]+', max_length=128)


class ExperimentTargetFilterValues(RootModel[List[ExperimentTargetFilterValue]]):
    root: List[ExperimentTargetFilterValue]


class ExperimentTargetName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTargetParameterName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTargetParameterValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ExperimentTargetSelectionMode(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateActionDescription(
    RootModel[constr(pattern=r'[\s\S]+', max_length=512)]
):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class ExperimentTemplateActionName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateActionParameter(
    RootModel[constr(pattern=r'[\S]+', max_length=1024)]
):
    root: constr(pattern=r'[\S]+', max_length=1024)


class ExperimentTemplateActionParameterMap(
    RootModel[Optional[Dict[str, ExperimentTemplateActionParameter]]]
):
    root: Optional[Dict[str, ExperimentTemplateActionParameter]] = None


class ExperimentTemplateActionParameterName(
    RootModel[constr(pattern=r'[\S]+', max_length=64)]
):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateActionStartAfter(
    RootModel[constr(pattern=r'[\S]+', max_length=64)]
):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateActionStartAfterList(
    RootModel[List[ExperimentTemplateActionStartAfter]]
):
    root: List[ExperimentTemplateActionStartAfter]


class ExperimentTemplateActionTargetName(
    RootModel[constr(pattern=r'[\S]+', max_length=64)]
):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateCloudWatchLogsLogConfiguration(BaseModel):
    logGroupArn: Optional[CloudWatchLogGroupArn] = None


class ExperimentTemplateCloudWatchLogsLogConfigurationInput(BaseModel):
    logGroupArn: CloudWatchLogGroupArn


class ExperimentTemplateDescription(
    RootModel[constr(pattern=r'[\s\S]+', max_length=512)]
):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class ExperimentTemplateId(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateTargetFilterPath(
    RootModel[constr(pattern=r'[\S]+', max_length=256)]
):
    root: constr(pattern=r'[\S]+', max_length=256)


class ExperimentTemplateTargetFilterValue(
    RootModel[constr(pattern=r'[\S]+', max_length=128)]
):
    root: constr(pattern=r'[\S]+', max_length=128)


class ExperimentTemplateTargetFilterValues(
    RootModel[List[ExperimentTemplateTargetFilterValue]]
):
    root: List[ExperimentTemplateTargetFilterValue]


class ExperimentTemplateTargetInputFilter(BaseModel):
    path: ExperimentTemplateTargetFilterPath
    values: ExperimentTemplateTargetFilterValues


class ExperimentTemplateTargetName(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateTargetParameterName(
    RootModel[constr(pattern=r'[\S]+', max_length=64)]
):
    root: constr(pattern=r'[\S]+', max_length=64)


class ExperimentTemplateTargetParameterValue(
    RootModel[
        constr(pattern=r'^[\p{L}\p{Z}\p{N}_.:/=+\-@]+$', min_length=1, max_length=1024)
    ]
):
    root: constr(
        pattern=r'^[\p{L}\p{Z}\p{N}_.:/=+\-@]+$', min_length=1, max_length=1024
    )


class ExperimentTemplateTargetSelectionMode(
    RootModel[constr(pattern=r'[\S]+', max_length=64)]
):
    root: constr(pattern=r'[\S]+', max_length=64)


class GetActionRequest(BaseModel):
    pass


class GetExperimentRequest(BaseModel):
    pass


class GetExperimentTemplateRequest(BaseModel):
    pass


class GetTargetResourceTypeRequest(BaseModel):
    pass


class LastUpdateTime(RootModel[datetime]):
    root: datetime


class ListActionsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListActionsRequest(BaseModel):
    pass


class ListExperimentTemplatesMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListExperimentTemplatesRequest(BaseModel):
    pass


class ListExperimentsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListExperimentsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListTargetResourceTypesMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListTargetResourceTypesRequest(BaseModel):
    pass


class LogSchemaVersion(RootModel[int]):
    root: int


class NextToken(RootModel[constr(pattern=r'[\S]+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'[\S]+', min_length=1, max_length=1024)


class ResourceArn(RootModel[constr(pattern=r'[\S]+', min_length=20, max_length=2048)]):
    root: constr(pattern=r'[\S]+', min_length=20, max_length=2048)


class ResourceArnList(RootModel[List[ResourceArn]]):
    root: List[ResourceArn] = Field(..., max_length=5)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(RootModel[constr(pattern=r'[\S]+', min_length=20, max_length=2048)]):
    root: constr(pattern=r'[\S]+', min_length=20, max_length=2048)


class S3BucketName(RootModel[constr(pattern=r'[\S]+', min_length=3, max_length=63)]):
    root: constr(pattern=r'[\S]+', min_length=3, max_length=63)


class S3ObjectKey(RootModel[constr(pattern=r'[\s\S]+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'[\s\S]+', min_length=1, max_length=1024)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class StopConditionSource(RootModel[constr(pattern=r'[\S]+', max_length=64)]):
    root: constr(pattern=r'[\S]+', max_length=64)


class StopConditionValue(
    RootModel[constr(pattern=r'[\s\S]+', min_length=20, max_length=2048)]
):
    root: constr(pattern=r'[\s\S]+', min_length=20, max_length=2048)


class StopExperimentRequest(BaseModel):
    pass


class TagKey(RootModel[constr(pattern=r'[\s\S]+', max_length=128)]):
    root: constr(pattern=r'[\s\S]+', max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(pattern=r'[\s\S]*', max_length=256)]):
    root: constr(pattern=r'[\s\S]*', max_length=256)


class TargetResourceTypeDescription(
    RootModel[constr(pattern=r'[\s\S]+', max_length=512)]
):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class TargetResourceTypeId(RootModel[constr(pattern=r'[\S]+', max_length=128)]):
    root: constr(pattern=r'[\S]+', max_length=128)


class TargetResourceTypeParameterDescription(
    RootModel[constr(pattern=r'[\s\S]+', max_length=512)]
):
    root: constr(pattern=r'[\s\S]+', max_length=512)


class TargetResourceTypeParameterName(
    RootModel[constr(pattern=r'[\S]+', max_length=64)]
):
    root: constr(pattern=r'[\S]+', max_length=64)


class TargetResourceTypeParameterRequired(RootModel[bool]):
    root: bool


class TargetResourceTypeSummary(BaseModel):
    description: Optional[TargetResourceTypeDescription] = None
    resourceType: Optional[TargetResourceTypeId] = None


class TargetResourceTypeSummaryList(RootModel[List[TargetResourceTypeSummary]]):
    root: List[TargetResourceTypeSummary]


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateExperimentTemplateStopConditionInput(BaseModel):
    source: StopConditionSource
    value: Optional[StopConditionValue] = None


class UpdateExperimentTemplateStopConditionInputList(
    RootModel[List[UpdateExperimentTemplateStopConditionInput]]
):
    root: List[UpdateExperimentTemplateStopConditionInput]


class ValidationException(RootModel[Any]):
    root: Any


class ExperimentsPostRequest(BaseModel):
    clientToken: constr(pattern=r'[\S]+', min_length=1, max_length=1024) = Field(
        ...,
        description='Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.',
    )
    experimentTemplateId: constr(pattern=r'[\S]+', max_length=64) = Field(
        ..., description='The ID of the experiment template.'
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to apply to the experiment.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(..., description='The tags for the resource.')


class ActionParameter(BaseModel):
    description: Optional[ActionParameterDescription] = None
    required: Optional[ActionParameterRequired] = None


class ActionParameterMap(RootModel[Optional[Dict[str, ActionParameter]]]):
    root: Optional[Dict[str, ActionParameter]] = None


class ActionTarget(BaseModel):
    resourceType: Optional[TargetResourceTypeId] = None


class ActionTargetMap(RootModel[Optional[Dict[str, ActionTarget]]]):
    root: Optional[Dict[str, ActionTarget]] = None


class CreateExperimentTemplateStopConditionInput(BaseModel):
    source: StopConditionSource
    value: Optional[StopConditionValue] = None


class CreateExperimentTemplateStopConditionInputList(
    RootModel[List[CreateExperimentTemplateStopConditionInput]]
):
    root: List[CreateExperimentTemplateStopConditionInput]


class ExperimentActionState(BaseModel):
    reason: Optional[ExperimentActionStatusReason] = None
    status: Optional[ExperimentActionStatus] = None


class ExperimentActionTargetMap(RootModel[Optional[Dict[str, ExperimentTargetName]]]):
    root: Optional[Dict[str, ExperimentTargetName]] = None


class ExperimentS3LogConfiguration(BaseModel):
    bucketName: Optional[S3BucketName] = None
    prefix: Optional[S3ObjectKey] = None


class ExperimentState(BaseModel):
    reason: Optional[ExperimentStatusReason] = None
    status: Optional[ExperimentStatus] = None


class ExperimentStopCondition(BaseModel):
    source: Optional[StopConditionSource] = None
    value: Optional[StopConditionValue] = None


class ExperimentStopConditionList(RootModel[List[ExperimentStopCondition]]):
    root: List[ExperimentStopCondition]


class ExperimentTargetFilter(BaseModel):
    path: Optional[ExperimentTargetFilterPath] = None
    values: Optional[ExperimentTargetFilterValues] = None


class ExperimentTargetFilterList(RootModel[List[ExperimentTargetFilter]]):
    root: List[ExperimentTargetFilter]


class ExperimentTargetParameterMap(
    RootModel[Optional[Dict[str, ExperimentTargetParameterValue]]]
):
    root: Optional[Dict[str, ExperimentTargetParameterValue]] = None


class ExperimentTemplateActionTargetMap(
    RootModel[Optional[Dict[str, ExperimentTemplateTargetName]]]
):
    root: Optional[Dict[str, ExperimentTemplateTargetName]] = None


class ExperimentTemplateS3LogConfiguration(BaseModel):
    bucketName: Optional[S3BucketName] = None
    prefix: Optional[S3ObjectKey] = None


class ExperimentTemplateS3LogConfigurationInput(BaseModel):
    bucketName: S3BucketName
    prefix: Optional[S3ObjectKey] = None


class ExperimentTemplateStopCondition(BaseModel):
    source: Optional[StopConditionSource] = None
    value: Optional[StopConditionValue] = None


class ExperimentTemplateStopConditionList(
    RootModel[List[ExperimentTemplateStopCondition]]
):
    root: List[ExperimentTemplateStopCondition]


class ExperimentTemplateTargetFilter(BaseModel):
    path: Optional[ExperimentTemplateTargetFilterPath] = None
    values: Optional[ExperimentTemplateTargetFilterValues] = None


class ExperimentTemplateTargetFilterInputList(
    RootModel[List[ExperimentTemplateTargetInputFilter]]
):
    root: List[ExperimentTemplateTargetInputFilter]


class ExperimentTemplateTargetFilterList(
    RootModel[List[ExperimentTemplateTargetFilter]]
):
    root: List[ExperimentTemplateTargetFilter]


class ExperimentTemplateTargetParameterMap(
    RootModel[Optional[Dict[str, ExperimentTemplateTargetParameterValue]]]
):
    root: Optional[Dict[str, ExperimentTemplateTargetParameterValue]] = None


class ListTargetResourceTypesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    targetResourceTypes: Optional[TargetResourceTypeSummaryList] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class TargetResourceTypeParameter(BaseModel):
    description: Optional[TargetResourceTypeParameterDescription] = None
    required: Optional[TargetResourceTypeParameterRequired] = None


class TargetResourceTypeParameterMap(
    RootModel[Optional[Dict[str, TargetResourceTypeParameter]]]
):
    root: Optional[Dict[str, TargetResourceTypeParameter]] = None


class UpdateExperimentTemplateActionInputItem(BaseModel):
    actionId: Optional[ActionId] = None
    description: Optional[ExperimentTemplateActionDescription] = None
    parameters: Optional[ExperimentTemplateActionParameterMap] = None
    startAfter: Optional[ExperimentTemplateActionStartAfterList] = None
    targets: Optional[ExperimentTemplateActionTargetMap] = None


class UpdateExperimentTemplateActionInputMap(
    RootModel[Optional[Dict[str, UpdateExperimentTemplateActionInputItem]]]
):
    root: Optional[Dict[str, UpdateExperimentTemplateActionInputItem]] = None


class UpdateExperimentTemplateLogConfigurationInput(BaseModel):
    cloudWatchLogsConfiguration: Optional[
        ExperimentTemplateCloudWatchLogsLogConfigurationInput
    ] = None
    logSchemaVersion: Optional[LogSchemaVersion] = None
    s3Configuration: Optional[ExperimentTemplateS3LogConfigurationInput] = None


class UpdateExperimentTemplateTargetInput(BaseModel):
    filters: Optional[ExperimentTemplateTargetFilterInputList] = None
    parameters: Optional[ExperimentTemplateTargetParameterMap] = None
    resourceArns: Optional[ResourceArnList] = None
    resourceTags: Optional[TagMap] = None
    resourceType: TargetResourceTypeId
    selectionMode: ExperimentTemplateTargetSelectionMode


class UpdateExperimentTemplateTargetInputMap(
    RootModel[Optional[Dict[str, UpdateExperimentTemplateTargetInput]]]
):
    root: Optional[Dict[str, UpdateExperimentTemplateTargetInput]] = None


class LogConfiguration(BaseModel):
    cloudWatchLogsConfiguration: Optional[
        ExperimentTemplateCloudWatchLogsLogConfigurationInput
    ] = None
    logSchemaVersion: Optional[LogSchemaVersion] = None
    s3Configuration: Optional[ExperimentTemplateS3LogConfigurationInput] = None


class ExperimentTemplatesIdPatchRequest(BaseModel):
    actions: Optional[Dict[str, UpdateExperimentTemplateActionInputItem]] = Field(
        None, description='The actions for the experiment.'
    )
    description: Optional[constr(pattern=r'[\s\S]+', max_length=512)] = Field(
        None, description='A description for the template.'
    )
    logConfiguration: Optional[LogConfiguration] = Field(
        None, description='Specifies the configuration for experiment logging.'
    )
    roleArn: Optional[constr(pattern=r'[\S]+', min_length=20, max_length=2048)] = Field(
        None,
        description='The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.',
    )
    stopConditions: Optional[List[UpdateExperimentTemplateStopConditionInput]] = Field(
        None, description='The stop conditions for the experiment.'
    )
    targets: Optional[Dict[str, UpdateExperimentTemplateTargetInput]] = Field(
        None, description='The targets for the experiment.'
    )


class Action(BaseModel):
    description: Optional[ActionDescription] = None
    id: Optional[ActionId] = None
    parameters: Optional[ActionParameterMap] = None
    tags: Optional[TagMap] = None
    targets: Optional[ActionTargetMap] = None


class ActionSummary(BaseModel):
    description: Optional[ActionDescription] = None
    id: Optional[ActionId] = None
    tags: Optional[TagMap] = None
    targets: Optional[ActionTargetMap] = None


class ActionSummaryList(RootModel[List[ActionSummary]]):
    root: List[ActionSummary]


class CreateExperimentTemplateActionInput(BaseModel):
    actionId: ActionId
    description: Optional[ExperimentTemplateActionDescription] = None
    parameters: Optional[ExperimentTemplateActionParameterMap] = None
    startAfter: Optional[ExperimentTemplateActionStartAfterList] = None
    targets: Optional[ExperimentTemplateActionTargetMap] = None


class CreateExperimentTemplateActionInputMap(
    RootModel[Optional[Dict[str, CreateExperimentTemplateActionInput]]]
):
    root: Optional[Dict[str, CreateExperimentTemplateActionInput]] = None


class CreateExperimentTemplateLogConfigurationInput(BaseModel):
    cloudWatchLogsConfiguration: Optional[
        ExperimentTemplateCloudWatchLogsLogConfigurationInput
    ] = None
    logSchemaVersion: LogSchemaVersion
    s3Configuration: Optional[ExperimentTemplateS3LogConfigurationInput] = None


class CreateExperimentTemplateTargetInput(BaseModel):
    filters: Optional[ExperimentTemplateTargetFilterInputList] = None
    parameters: Optional[ExperimentTemplateTargetParameterMap] = None
    resourceArns: Optional[ResourceArnList] = None
    resourceTags: Optional[TagMap] = None
    resourceType: TargetResourceTypeId
    selectionMode: ExperimentTemplateTargetSelectionMode


class CreateExperimentTemplateTargetInputMap(
    RootModel[Optional[Dict[str, CreateExperimentTemplateTargetInput]]]
):
    root: Optional[Dict[str, CreateExperimentTemplateTargetInput]] = None


class ExperimentAction(BaseModel):
    actionId: Optional[ActionId] = None
    description: Optional[ExperimentActionDescription] = None
    endTime: Optional[ExperimentActionEndTime] = None
    parameters: Optional[ExperimentActionParameterMap] = None
    startAfter: Optional[ExperimentActionStartAfterList] = None
    startTime: Optional[ExperimentActionStartTime] = None
    state: Optional[ExperimentActionState] = None
    targets: Optional[ExperimentActionTargetMap] = None


class ExperimentActionMap(RootModel[Optional[Dict[str, ExperimentAction]]]):
    root: Optional[Dict[str, ExperimentAction]] = None


class ExperimentLogConfiguration(BaseModel):
    cloudWatchLogsConfiguration: Optional[ExperimentCloudWatchLogsLogConfiguration] = (
        None
    )
    logSchemaVersion: Optional[LogSchemaVersion] = None
    s3Configuration: Optional[ExperimentS3LogConfiguration] = None


class ExperimentSummary(BaseModel):
    creationTime: Optional[CreationTime] = None
    experimentTemplateId: Optional[ExperimentTemplateId] = None
    id: Optional[ExperimentId] = None
    state: Optional[ExperimentState] = None
    tags: Optional[TagMap] = None


class ExperimentSummaryList(RootModel[List[ExperimentSummary]]):
    root: List[ExperimentSummary]


class ExperimentTarget(BaseModel):
    filters: Optional[ExperimentTargetFilterList] = None
    parameters: Optional[ExperimentTargetParameterMap] = None
    resourceArns: Optional[ResourceArnList] = None
    resourceTags: Optional[TagMap] = None
    resourceType: Optional[TargetResourceTypeId] = None
    selectionMode: Optional[ExperimentTargetSelectionMode] = None


class ExperimentTargetMap(RootModel[Optional[Dict[str, ExperimentTarget]]]):
    root: Optional[Dict[str, ExperimentTarget]] = None


class ExperimentTemplateAction(BaseModel):
    actionId: Optional[ActionId] = None
    description: Optional[ExperimentTemplateActionDescription] = None
    parameters: Optional[ExperimentTemplateActionParameterMap] = None
    startAfter: Optional[ExperimentTemplateActionStartAfterList] = None
    targets: Optional[ExperimentTemplateActionTargetMap] = None


class ExperimentTemplateActionMap(
    RootModel[Optional[Dict[str, ExperimentTemplateAction]]]
):
    root: Optional[Dict[str, ExperimentTemplateAction]] = None


class ExperimentTemplateLogConfiguration(BaseModel):
    cloudWatchLogsConfiguration: Optional[
        ExperimentTemplateCloudWatchLogsLogConfiguration
    ] = None
    logSchemaVersion: Optional[LogSchemaVersion] = None
    s3Configuration: Optional[ExperimentTemplateS3LogConfiguration] = None


class ExperimentTemplateSummary(BaseModel):
    creationTime: Optional[CreationTime] = None
    description: Optional[ExperimentTemplateDescription] = None
    id: Optional[ExperimentTemplateId] = None
    lastUpdateTime: Optional[LastUpdateTime] = None
    tags: Optional[TagMap] = None


class ExperimentTemplateSummaryList(RootModel[List[ExperimentTemplateSummary]]):
    root: List[ExperimentTemplateSummary]


class ExperimentTemplateTarget(BaseModel):
    filters: Optional[ExperimentTemplateTargetFilterList] = None
    parameters: Optional[ExperimentTemplateTargetParameterMap] = None
    resourceArns: Optional[ResourceArnList] = None
    resourceTags: Optional[TagMap] = None
    resourceType: Optional[TargetResourceTypeId] = None
    selectionMode: Optional[ExperimentTemplateTargetSelectionMode] = None


class ExperimentTemplateTargetMap(
    RootModel[Optional[Dict[str, ExperimentTemplateTarget]]]
):
    root: Optional[Dict[str, ExperimentTemplateTarget]] = None


class GetActionResponse(BaseModel):
    action: Optional[Action] = None


class ListActionsResponse(BaseModel):
    actions: Optional[ActionSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListExperimentTemplatesResponse(BaseModel):
    experimentTemplates: Optional[ExperimentTemplateSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListExperimentsResponse(BaseModel):
    experiments: Optional[ExperimentSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class StartExperimentRequest(BaseModel):
    clientToken: ClientToken
    experimentTemplateId: ExperimentTemplateId
    tags: Optional[TagMap] = None


class TargetResourceType(BaseModel):
    description: Optional[TargetResourceTypeDescription] = None
    parameters: Optional[TargetResourceTypeParameterMap] = None
    resourceType: Optional[TargetResourceTypeId] = None


class UpdateExperimentTemplateRequest(BaseModel):
    actions: Optional[UpdateExperimentTemplateActionInputMap] = None
    description: Optional[ExperimentTemplateDescription] = None
    logConfiguration: Optional[UpdateExperimentTemplateLogConfigurationInput] = None
    roleArn: Optional[RoleArn] = None
    stopConditions: Optional[UpdateExperimentTemplateStopConditionInputList] = None
    targets: Optional[UpdateExperimentTemplateTargetInputMap] = None


class ExperimentTemplatesPostRequest(BaseModel):
    actions: Dict[str, CreateExperimentTemplateActionInput] = Field(
        ..., description='The actions for the experiment.'
    )
    clientToken: constr(pattern=r'[\S]+', min_length=1, max_length=1024) = Field(
        ...,
        description='Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.',
    )
    description: constr(pattern=r'[\s\S]+', max_length=512) = Field(
        ..., description='A description for the experiment template.'
    )
    logConfiguration: Optional[LogConfiguration] = Field(
        None, description='Specifies the configuration for experiment logging.'
    )
    roleArn: constr(pattern=r'[\S]+', min_length=20, max_length=2048) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.',
    )
    stopConditions: List[CreateExperimentTemplateStopConditionInput] = Field(
        ..., description='The stop conditions.'
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to apply to the experiment template.'
    )
    targets: Optional[Dict[str, CreateExperimentTemplateTargetInput]] = Field(
        None, description='The targets for the experiment.'
    )


class CreateExperimentTemplateRequest(BaseModel):
    actions: CreateExperimentTemplateActionInputMap
    clientToken: ClientToken
    description: ExperimentTemplateDescription
    logConfiguration: Optional[CreateExperimentTemplateLogConfigurationInput] = None
    roleArn: RoleArn
    stopConditions: CreateExperimentTemplateStopConditionInputList
    tags: Optional[TagMap] = None
    targets: Optional[CreateExperimentTemplateTargetInputMap] = None


class Experiment(BaseModel):
    actions: Optional[ExperimentActionMap] = None
    creationTime: Optional[CreationTime] = None
    endTime: Optional[ExperimentEndTime] = None
    experimentTemplateId: Optional[ExperimentTemplateId] = None
    id: Optional[ExperimentId] = None
    logConfiguration: Optional[ExperimentLogConfiguration] = None
    roleArn: Optional[RoleArn] = None
    startTime: Optional[ExperimentStartTime] = None
    state: Optional[ExperimentState] = None
    stopConditions: Optional[ExperimentStopConditionList] = None
    tags: Optional[TagMap] = None
    targets: Optional[ExperimentTargetMap] = None


class ExperimentTemplate(BaseModel):
    actions: Optional[ExperimentTemplateActionMap] = None
    creationTime: Optional[CreationTime] = None
    description: Optional[ExperimentTemplateDescription] = None
    id: Optional[ExperimentTemplateId] = None
    lastUpdateTime: Optional[LastUpdateTime] = None
    logConfiguration: Optional[ExperimentTemplateLogConfiguration] = None
    roleArn: Optional[RoleArn] = None
    stopConditions: Optional[ExperimentTemplateStopConditionList] = None
    tags: Optional[TagMap] = None
    targets: Optional[ExperimentTemplateTargetMap] = None


class GetExperimentResponse(BaseModel):
    experiment: Optional[Experiment] = None


class GetExperimentTemplateResponse(BaseModel):
    experimentTemplate: Optional[ExperimentTemplate] = None


class GetTargetResourceTypeResponse(BaseModel):
    targetResourceType: Optional[TargetResourceType] = None


class StartExperimentResponse(BaseModel):
    experiment: Optional[Experiment] = None


class StopExperimentResponse(BaseModel):
    experiment: Optional[Experiment] = None


class UpdateExperimentTemplateResponse(BaseModel):
    experimentTemplate: Optional[ExperimentTemplate] = None


class CreateExperimentTemplateResponse(BaseModel):
    experimentTemplate: Optional[ExperimentTemplate] = None


class DeleteExperimentTemplateResponse(BaseModel):
    experimentTemplate: Optional[ExperimentTemplate] = None
